set serveroutput on

CREATE OR REPLACE
FUNCTION prim(n integer) RETURN number IS
  m integer := 2;
  root integer := sqrt(n);
BEGIN
  while m < root loop
    if mod(n, m) = 0 then
      return (0);
    end if;
    m := m + 1;
  end loop;

  return (1);
END;
/
SELECT prim(26388279066623) from dual;


CREATE OR REPLACE
PROCEDURE fib(n integer) IS
  p1 integer := 0;
  p2 integer := 1;
  sums integer;
begin
  for i in 2..n loop
    sums := p1 + p2;
    p1 := p2;
    p2 := sums;
  end loop;
  dbms_output.put_line(p1);
end;
/
set serveroutput on
call fib(10);


CREATE OR REPLACE
FUNCTION lnko(p1 integer, p2 integer) RETURN number IS
  a integer := p1;
  b integer := p2;
begin
  while a != b loop
    if a > b then
      a := a - b;
    else
      b := b - a;
    end if;
  end loop;
  return a;
end;
/
SELECT lnko(3570,7293) FROM dual;


CREATE OR REPLACE
FUNCTION faktor(n integer) RETURN integer IS
  fac integer := 1;
begin
  for i in 1..n loop
    fac := fac * i;
  end loop;
  return fac;
end;
/
SELECT faktor(10) FROM dual;


CREATE OR REPLACE
FUNCTION hanyszor(p1 VARCHAR2, p2 VARCHAR2) RETURN integer IS
begin
  return regexp_count(p1, p2);
end;
/
SELECT hanyszor ('ab c abb de ab fg', 'ab') FROM dual;


CREATE OR REPLACE
FUNCTION safe_to_number(numstr VARCHAR2) RETURN number IS
begin
  return to_number(numstr);
exception when others then
  return 0;
end;
/


CREATE OR REPLACE
FUNCTION osszeg(inpstr VARCHAR2) RETURN number IS
  digits VARCHAR2(20);
  summ number := 0;
  nth number  := 1;
begin
  SELECT REGEXP_SUBSTR(inpstr, '\d+', 1, nth, 'm')
  INTO digits FROM DUAL;

  while digits is not null loop
    dbms_output.put_line('digits: ' || digits);
    summ := summ + TO_NUMBER(digits);

    nth := nth + 1;
    SELECT REGEXP_SUBSTR(inpstr, '\d+', 1, nth, 'm')
    INTO digits FROM DUAL;
  end loop;
  return summ;
exception
  when others then
  return 0;
end;
/

set serveroutput on
SELECT osszeg('1 + 4 + 13 + 0') FROM dual;
SELECT osszeg('') FROM dual;
