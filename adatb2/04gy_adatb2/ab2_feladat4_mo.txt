B+ fa index
-----------
Az alábbi feladatban a tankönyben leírt és az előadáson is bemutatott algoritmussal 
építsünk fel egy B+ fát!

Tegyük fel, hogy egy B+ fa blokkjaiba 3 kulcs fér el plusz 4 mutató. A kulcsok 
különbözőek. Szúrjuk be a B+ fába az alábbi kulcsértékeket a megadott sorrendben:
39,15,50,70,79,83,72,43,75,45
Adjuk meg a B+ fa minden olyan állapotát, amikor egy csomópont kettéosztására volt szükség.
Például, az első kettéosztás utáni állapot:
                          50
                    15|39    50|70

Egy kis segítség:
----------------

Levél csúcs kettéosztásakor minden kulcsot megőrzünk a régi és az új (szomszédos) csúcsban.
1 új kulcs-mutató párt küldünk felfelé a szülő csúcsba, amit ott kell elhelyezni.

Belső csúcs kettéosztásakor (N,M csúcsra) a mutatók első fele az N-be kerül, a második az M-be.
A kulcsok első fele az N-be kerül a második fele az M-be, de középen kimarad egy kulcs,
ami az M-en keresztül (első gyermekén keresztül) elérhető legkisebb kulcsot tartalmazza. 
Ez nem kerül sem N-be, sem M-be, hanem ez megy fölfelé N és M közös szülőjébe az M-re mutató
mutatóval együtt.


Bitmap index
------------

DKOD DNEV   FIZETES  FOGLALKOZAS  BELEPES  OAZON
---------------------------------------------------
1    SMITH     800   CLERK        1980     20   
2    ALLEN    1600   SALESMAN     1981     30	   
3    WARD     1250   SALESMAN     1981     30	   
4    JONES    2975   MANAGER      1981     20	   
5    MARTIN   1250   SALESMAN     1981     30	   
6    BLAKE    2850   MANAGER      1981     30	   
7    CLARK    2450   MANAGER      1981     10	   
8    SCOTT    3000   ANALYST      1982     20	   
9    KING     5000   PRESIDENT    1981     10	   
10   TURNER   1500   SALESMAN     1981     30	   
11   ADAMS    1100   CLERK        1983     20	   
12   JAMES     950   CLERK        1981     30	   
13   FORD     3000   ANALYST      1981     20	   
14   MILLER   1300   CLERK        1982     10	 


Készítsen bitmap indexet a dolgozó tábla OAZON oszlopára és adja meg a bitvektorokat.

Tegyük fel, hogy a FOGLALKOZAS, a BELEPES és az OAZON oszlopokra létezik bitmap index (3 index).
Készítsük el az alábbi lekérdezésekhez szükséges bitvektorokat, majd végezzük el rajtuk a szükséges 
műveleteket, és adjuk meg azt az előállt bitvektort, ami alapján a végeredmény sorok megkaphatók.
Ellenőrzésképpen adjuk meg a lekérdezést SQL-ben is.
 
- Adjuk meg azoknak a dolgozóknak a nevét, akik 1981-ben léptek be és a foglalkozásuk hivatalnok (CLERK),
  vagy a 20-as osztályon dolgoznak és a foglalkozásuk MANAGER.

- Adjuk meg azoknak a dolgozóknak a nevét, akik nem 1981-ben léptek be és a 10-es vagy a 30-as 
  osztályon dolgoznak.

Tömörítse a következő bitvektort a szakaszhossz kódolással. (lásd UW_szakaszhossz_kodolas.doc)
0000000000000000000000010000000101

Fejtsük vissza a következő, szakaszhossz kódolással tömörített bitvektort:
1111010101001011



Oracle indexek  
--------------
(DBA_INDEXES, DBA_IND_COLUMNS, DBA_IND_EXPRESSIONS)

Hozzunk létre egy vagy több táblához több különböző indexet, legyen köztük több oszlopos,
csökkenő sorrendű, bitmap, függvény alapú stb. (Ehhez használhatók az ab2_oracle.doc
állományban szereplő példák, vagy a cr_index.txt-ben szereplők.)
Az alábbi lekérdezésekkel megállapítjuk az iménti indexeknek mindenféle tulajdonságait a 
katalógusokból.

Adjuk meg azoknak a tábláknak a nevét, amelyeknek van csökkenő sorrendben indexelt oszlopa.
--------------------------------------------------------------------------------
SELECT * FROM dba_ind_columns WHERE descend='DESC' AND index_owner='NIKOVITS';

Miért ilyen furcsa az oszlopnév?
-> lásd DBA_IND_EXPRESSIONS

Adjuk meg azoknak az indexeknek a nevét, amelyek legalább 9 oszloposak.
(Vagyis a táblának legalább 9 oszlopát vagy egyéb kifejezését indexelik.)
--------------------------------------------------------------------------------
SELECT index_owner, index_name FROM dba_ind_columns 
GROUP BY index_owner, index_name HAVING count(*) >=9;

Adjuk meg az SH.SALES táblára létrehozott bitmap indexek nevét.
--------------------------------------------------------------------------------
SELECT index_name FROM dba_indexes 
WHERE table_owner='SH' AND table_name='SALES' AND index_type='BITMAP';

Adjuk meg azon kétoszlopos indexek nevét és tulajdonosát, amelyeknek legalább 
az egyik kifejezése függvény alapú .
--------------------------------------------------------------------------------
SELECT index_owner, index_name FROM dba_ind_columns 
GROUP BY index_owner, index_name HAVING count(*) >=2
 INTERSECT
SELECT index_owner, index_name FROM dba_ind_expressions;

Adjuk meg az egyikükre, pl. az OE tulajdonában lévőre, hogy milyen kifejezések szerint 
vannak indexelve a soraik. (Vagyis mi a függveny, ami alapján a bejegyzések készülnek.)
--------------------------------------------------------------------------------
SELECT * FROM dba_ind_expressions WHERE index_owner='OE';

Adjuk meg a NIKOVITS felhasználó tulajdonában levő index-szervezett táblák nevét.
(Melyik táblatéren vannak ezek a táblák? -> miért nem látható?)
--------------------------------------------------------------------------------
SELECT owner, table_name, iot_name, iot_type FROM dba_tables 
WHERE owner='NIKOVITS' AND iot_type = 'IOT';

Adjuk meg a fenti táblák index részét, és azt, hogy ezek az index részek (szegmensek) 
melyik táblatéren vannak?
--------------------------------------------------------------------------------
SELECT table_name, index_name, index_type, tablespace_name FROM dba_indexes 
WHERE table_owner='NIKOVITS' AND index_type LIKE '%IOT%TOP%';

Keressük meg a szegmensek között az előző táblákat illetve indexeket, és adjuk
meg a méretüket.
--------------------------------------------------------------------------------
SELECT table_name, index_name, index_type, s.bytes
FROM dba_indexes i, dba_segments s 
WHERE i.table_owner='NIKOVITS' AND i.index_type LIKE '%IOT%TOP%'
AND i.index_name=s.segment_name AND s.owner='NIKOVITS';

Keressük meg az adatbázis objektumok között a fenti táblákat és indexeket, és adjuk
meg az objektum azonosítójukat és adatobjektum azonosítójukat (DATA_OBJECT_ID).

Adjuk meg a fenti táblák túlcsordulási részeit (ha van).
--------------------------------------------------------------------------------
SELECT owner, table_name, iot_name, iot_type FROM dba_tables 
WHERE owner='NIKOVITS' AND iot_type = 'IOT_OVERFLOW';

Keressük meg a túlcsordulási részeket a szegmensek között és adjuk meg a méretüket.
--------------------------------------------------------------------------------
SELECT t.owner, t.table_name, t.iot_name, t.iot_type, s.bytes 
FROM dba_tables t, dba_segments s
WHERE t.owner='NIKOVITS' AND t.iot_type = 'IOT_OVERFLOW'
AND s.owner='NIKOVITS' AND s.segment_name=t.table_name;

Keressük meg az objektum azonosítóikat és az adatobjektum azonosítóikat is.

Írjunk meg egy plsql procedúrát, amelyik a paraméterül kapott index szervezett 
tábláról kiírja a tábla méretét. 
   PROCEDURE iot_meret(p_owner VARCHAR2, p_tabla VARCHAR2) 
Vigyázzunk, mert a táblának lehet index és túlcsordulási szegmense is.

Adjuk meg azokat az index szervezett táblákat, amelyeknek pontosan 
1 dátum típusú oszlopa van.
--------------------------------------------------------------------------------
SELECT owner, table_name FROM dba_tables WHERE iot_type = 'IOT'
 INTERSECT
SELECT owner, table_name FROM dba_tab_columns
WHERE data_type='DATE' GROUP BY owner, table_name
HAVING count(*) = 1;

Adjuk meg, hogy mennyi a blokkolási faktora (a blokkban lévő sorok átlagos száma) 
a következő tábláknak. (Az üres blokkokat ne vegyük figyelembe.)
NIKOVITS.CIKK, SH.CUSTOMERS